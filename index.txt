<!DOCTYPE html><html lang="pt-BR"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <meta name="description" content="Contador moderno de séries com timer de treino e descanso">    <meta name="theme-color" content="#4F46E5">    <title>Contador de Séries</title>    <style>        * {            margin: 0;            padding: 0;            box-sizing: border-box;        }        body {            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;            background: linear-gradient(135deg, #f0f4ff 0%, #e0e7ff 50%, #f3e8ff 100%);            min-height: 100vh;            display: flex;            align-items: center;            justify-content: center;            padding: 1rem;        }        .container {            width: 100%;            max-width: 28rem;        }        .card {            background: white;            border-radius: 1.5rem;            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);            padding: 2rem;        }        .header {            text-align: center;            margin-bottom: 2rem;        }        .header h1 {            font-size: 1.875rem;            font-weight: 700;            color: #1f2937;            margin-bottom: 0.5rem;        }        .header p {            color: #9ca3af;            font-size: 0.875rem;        }        .timer-section {            margin-bottom: 2rem;            padding: 1.5rem;            border-radius: 1rem;            border: 2px solid;        }        .timer-total {            background: linear-gradient(to right, #f0fdf4, #f0fdfa);            border-color: #86efac;        }        .timer-rest {            background: linear-gradient(to right, #fef3c7, #fee2e2);            border-color: #fbbf24;        }        .timer-label {            font-size: 0.875rem;            font-weight: 600;            color: #374151;            text-align: center;            margin-bottom: 0.75rem;        }        .timer-display {            font-size: 3.5rem;            font-weight: 700;            text-align: center;            font-family: 'Courier New', monospace;            margin-bottom: 1rem;            letter-spacing: 0.1em;        }        .timer-total .timer-display {            color: #16a34a;        }        .timer-rest .timer-display {            color: #ea580c;        }        .button-group {            display: flex;            gap: 0.75rem;            justify-content: center;        }        button {            border: none;            border-radius: 0.75rem;            font-size: 1rem;            font-weight: 600;            cursor: pointer;            padding: 0.75rem 1.5rem;            transition: all 0.2s;            display: flex;            align-items: center;            justify-content: center;            gap: 0.5rem;        }        .btn-play {            flex: 1;            background: #22c55e;            color: white;        }        .btn-play:hover {            background: #16a34a;        }        .btn-play.pause {            background: #ef4444;        }        .btn-play.pause:hover {            background: #dc2626;        }        .btn-reset {            background: white;            border: 2px solid;            color: #374151;        }        .timer-total .btn-reset {            border-color: #86efac;            color: #16a34a;        }        .timer-total .btn-reset:hover {            background: #f0fdf4;        }        .timer-rest .btn-reset {            border-color: #fbbf24;            color: #ea580c;        }        .timer-rest .btn-reset:hover {            background: #fef3c7;        }        .stats {            display: grid;            grid-template-columns: 1fr 1fr;            gap: 1rem;            margin-bottom: 2rem;        }        .stat-box {            background: #f3f4f6;            border-radius: 0.75rem;            padding: 1rem;            text-align: center;        }        .stat-box.blue {            background: #eff6ff;        }        .stat-box.indigo {            background: #eef2ff;        }        .stat-number {            font-size: 1.875rem;            font-weight: 700;            margin-bottom: 0.25rem;        }        .stat-box.blue .stat-number {            color: #2563eb;        }        .stat-box.indigo .stat-number {            color: #4f46e5;        }        .stat-label {            font-size: 0.875rem;            color: #6b7280;        }        .input-section {            background: linear-gradient(to right, #f0f4ff, #eef2ff);            border-radius: 1rem;            padding: 1.5rem;            margin-bottom: 2rem;        }        .input-label {            font-size: 0.875rem;            font-weight: 600;            color: #374151;            margin-bottom: 1rem;            display: block;        }        .reps-control {            display: flex;            align-items: center;            justify-content: center;            gap: 1rem;            margin-bottom: 1.5rem;        }        .btn-control {            width: 3rem;            height: 3rem;            padding: 0;            border-radius: 0.5rem;            border: 2px solid #d1d5db;            background: white;            font-size: 1.25rem;            color: #374151;        }        .btn-control:hover {            border-color: #9ca3af;        }        .reps-display {            font-size: 3.5rem;            font-weight: 700;            color: #4f46e5;            width: 6rem;            text-align: center;        }        .btn-plus {            width: 3rem;            height: 3rem;            padding: 0;            border-radius: 0.5rem;            background: linear-gradient(to right, #3b82f6, #4f46e5);            color: white;            border: none;            font-size: 1.25rem;        }        .btn-plus:hover {            background: linear-gradient(to right, #2563eb, #4338ca);        }        .btn-add-serie {            width: 100%;            background: linear-gradient(to right, #3b82f6, #4f46e5);            color: white;            padding: 0.75rem;            border-radius: 0.75rem;            border: none;            font-size: 1rem;            font-weight: 600;            cursor: pointer;            box-shadow: 0 10px 15px -3px rgba(59, 130, 246, 0.3);            transition: all 0.2s;        }        .btn-add-serie:hover {            background: linear-gradient(to right, #2563eb, #4338ca);            box-shadow: 0 15px 20px -3px rgba(59, 130, 246, 0.4);        }        .series-list {            margin-bottom: 2rem;        }        .series-title {            font-size: 0.875rem;            font-weight: 600;            color: #374151;            margin-bottom: 1rem;        }        .series-container {            max-height: 16rem;            overflow-y: auto;            display: flex;            flex-direction: column;            gap: 0.75rem;        }        .serie-item {            display: flex;            align-items: center;            justify-content: space-between;            background: #f9fafb;            padding: 1rem;            border-radius: 0.75rem;            transition: background 0.2s;        }        .serie-item:hover {            background: #f3f4f6;        }        .serie-info {            display: flex;            align-items: center;            gap: 1rem;        }        .serie-number {            width: 2.5rem;            height: 2.5rem;            display: flex;            align-items: center;            justify-content: center;            background: linear-gradient(to right, #3b82f6, #4f46e5);            color: white;            border-radius: 0.5rem;            font-weight: 700;        }        .serie-details p {            font-size: 0.875rem;            font-weight: 600;            color: #1f2937;            margin-bottom: 0.25rem;        }        .serie-details .reps {            font-size: 1.125rem;            font-weight: 700;            color: #4f46e5;        }        .btn-remove {            width: 2rem;            height: 2rem;            padding: 0;            border-radius: 0.5rem;            background: transparent;            color: #ef4444;            border: none;            font-size: 1.25rem;            cursor: pointer;            transition: all 0.2s;        }        .btn-remove:hover {            background: #fee2e2;            color: #b91c1c;        }        .empty-state {            text-align: center;            padding: 2rem 0;            color: #9ca3af;            font-size: 0.875rem;        }        .btn-reset-all {            width: 100%;            background: white;            border: 2px solid #d1d5db;            color: #374151;            padding: 0.75rem;            border-radius: 0.75rem;            font-size: 1rem;            font-weight: 600;            cursor: pointer;            transition: all 0.2s;        }        .btn-reset-all:hover {            background: #f9fafb;            border-color: #9ca3af;        }        .footer {            text-align: center;            padding-top: 1.5rem;            border-top: 1px solid #e5e7eb;            color: #6b7280;            font-size: 0.75rem;        }        .motivation {            text-align: center;            margin-top: 1.5rem;            color: #4b5563;            font-size: 0.875rem;        }        @media (max-width: 640px) {            .card {                padding: 1.5rem;            }            .header h1 {                font-size: 1.5rem;            }            .timer-display {                font-size: 2.5rem;            }            .reps-display {                font-size: 2.5rem;                width: 5rem;            }        }    </style></head><body>    <div class="container">        <div class="card">            <!-- Header -->            <div class="header">                <h1>Contador de Séries</h1>                <p>Acompanhe seu progresso de treino</p>            </div>            <!-- Total Workout Timer -->            <div class="timer-section timer-total">                <div class="timer-label">?? Tempo Total de Treino</div>                <div class="timer-display" id="totalTime">00:00</div>                <div class="button-group">                    <button class="btn-play" id="btnToggleTotal">                        <span id="playIcon">?</span>                        <span id="playText">Iniciar</span>                    </button>                    <button class="btn-reset" id="btnResetTotal">?</button>                </div>            </div>            <!-- Rest Timer -->            <div id="restTimerSection" class="timer-section timer-rest" style="display: none;">                <div class="timer-label">?? Tempo de Descanso</div>                <div class="timer-display" id="restTime">00:00</div>                <div class="button-group">                    <button class="btn-play" id="btnToggleRest">                        <span id="playIconRest">?</span>                        <span id="playTextRest">Iniciar</span>                    </button>                    <button class="btn-reset" id="btnResetRest">?</button>                </div>            </div>            <!-- Stats -->            <div class="stats">                <div class="stat-box blue">                    <div class="stat-number" id="totalSeries">0</div>                    <div class="stat-label">Séries</div>                </div>                <div class="stat-box indigo">                    <div class="stat-number" id="totalReps">0</div>                    <div class="stat-label">Repetições</div>                </div>            </div>            <!-- Input Section -->            <div class="input-section">                <label class="input-label">Repetições da série atual</label>                <div class="reps-control">                    <button class="btn-control" id="btnDecrease">-</button>                    <div class="reps-display" id="currentReps">0</div>                    <button class="btn-plus" id="btnIncrease">+</button>                </div>                <button class="btn-add-serie" id="btnAddSerie">+ Adicionar Série</button>            </div>            <!-- Series List -->            <div class="series-list">                <div class="series-title">Histórico de Séries</div>                <div class="series-container" id="seriesContainer">                    <div class="empty-state">Nenhuma série adicionada ainda. Comece a treinar! ??</div>                </div>            </div>            <!-- Reset Button -->            <button class="btn-reset-all" id="btnResetAll">? Resetar Tudo</button>            <!-- Footer -->            <div class="footer">                <p>?? Continue assim! Você está indo bem!</p>            </div>            <!-- Motivation -->            <div class="motivation" id="motivation"></div>        </div>    </div>    <script>        // State        let series = [];        let currentReps = 0;        let restTime = 0;        let totalTime = 0;        let isRestRunning = false;        let isTotalRunning = false;        const STORAGE_KEY = 'contador-series';        // DOM Elements        const currentRepsEl = document.getElementById('currentReps');        const totalSeriesEl = document.getElementById('totalSeries');        const totalRepsEl = document.getElementById('totalReps');        const seriesContainerEl = document.getElementById('seriesContainer');        const restTimerSectionEl = document.getElementById('restTimerSection');        const restTimeEl = document.getElementById('restTime');        const totalTimeEl = document.getElementById('totalTime');        const motivationEl = document.getElementById('motivation');        // Buttons        const btnIncrease = document.getElementById('btnIncrease');        const btnDecrease = document.getElementById('btnDecrease');        const btnAddSerie = document.getElementById('btnAddSerie');        const btnToggleRest = document.getElementById('btnToggleRest');        const btnResetRest = document.getElementById('btnResetRest');        const btnToggleTotal = document.getElementById('btnToggleTotal');        const btnResetTotal = document.getElementById('btnResetTotal');        const btnResetAll = document.getElementById('btnResetAll');        // Initialize        function init() {            loadData();            attachEventListeners();            updateUI();            startTimers();        }        // Load data from localStorage        function loadData() {            const saved = localStorage.getItem(STORAGE_KEY);            if (saved) {                try {                    series = JSON.parse(saved);                } catch (e) {                    console.error('Error loading data:', e);                }            }        }        // Save data to localStorage        function saveData() {            localStorage.setItem(STORAGE_KEY, JSON.stringify(series));        }        // Format time        function formatTime(seconds) {            const mins = Math.floor(seconds / 60);            const secs = seconds % 60;            return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;        }        // Update UI        function updateUI() {            currentRepsEl.textContent = currentReps;            totalSeriesEl.textContent = series.length;            totalRepsEl.textContent = series.reduce((sum, s) => sum + s.reps, 0);            totalTimeEl.textContent = formatTime(totalTime);            restTimeEl.textContent = formatTime(restTime);            // Show/hide rest timer            restTimerSectionEl.style.display = series.length > 0 ? 'block' : 'none';            // Update series list            if (series.length === 0) {                seriesContainerEl.innerHTML = '<div class="empty-state">Nenhuma série adicionada ainda. Comece a treinar! ??</div>';            } else {                seriesContainerEl.innerHTML = series.map((s, i) => `                    <div class="serie-item">                        <div class="serie-info">                            <div class="serie-number">${i + 1}</div>                            <div class="serie-details">                                <p>Série ${i + 1}</p>                                <div class="reps">${s.reps} ${s.reps === 1 ? 'repetição' : 'repetições'}</div>                            </div>                        </div>                        <button class="btn-remove" onclick="removeSerie(${s.id})">×</button>                    </div>                `).join('');            }            // Update motivation            const total = series.length;            let msg = '';            if (total === 1) msg = 'Ótimo começo! ??';            else if (total > 1 && total < 5) msg = 'Você está no caminho certo! ??';            else if (total >= 5 && total < 10) msg = 'Impressionante! Você é um guerreiro! ??';            else if (total >= 10) msg = 'Você é uma máquina! Parabéns pela dedicação! ??';            motivationEl.textContent = msg;            // Update button states            btnToggleRest.className = isRestRunning ? 'btn-play pause' : 'btn-play';            btnToggleRest.innerHTML = isRestRunning ? '<span id="playIconRest">?</span><span id="playTextRest">Pausar</span>' : '<span id="playIconRest">?</span><span id="playTextRest">Iniciar</span>';            btnToggleTotal.className = isTotalRunning ? 'btn-play pause' : 'btn-play';            btnToggleTotal.innerHTML = isTotalRunning ? '<span id="playIcon">?</span><span id="playText">Pausar</span>' : '<span id="playIcon">?</span><span id="playText">Iniciar</span>';        }        // Event listeners        function attachEventListeners() {            btnIncrease.addEventListener('click', () => {                currentReps++;                updateUI();            });            btnDecrease.addEventListener('click', () => {                if (currentReps > 0) currentReps--;                updateUI();            });            btnAddSerie.addEventListener('click', () => {                if (currentReps >= 0) {                    series.push({ id: Date.now(), reps: currentReps });                    currentReps = 0;                    restTime = 0;                    isRestRunning = true;                    if (!isTotalRunning) isTotalRunning = true;                    saveData();                    updateUI();                }            });            btnToggleRest.addEventListener('click', () => {                isRestRunning = !isRestRunning;                updateUI();            });            btnResetRest.addEventListener('click', () => {                restTime = 0;                isRestRunning = false;                updateUI();            });            btnToggleTotal.addEventListener('click', () => {                isTotalRunning = !isTotalRunning;                updateUI();            });            btnResetTotal.addEventListener('click', () => {                totalTime = 0;                isTotalRunning = false;                updateUI();            });            btnResetAll.addEventListener('click', () => {                if (confirm('Tem certeza que deseja resetar tudo?')) {                    series = [];                    currentReps = 0;                    restTime = 0;                    totalTime = 0;                    isRestRunning = false;                    isTotalRunning = false;                    localStorage.removeItem(STORAGE_KEY);                    updateUI();                }            });        }        // Remove serie        function removeSerie(id) {            series = series.filter(s => s.id !== id);            saveData();            updateUI();        }        // Timers        function startTimers() {            setInterval(() => {                if (isRestRunning) restTime++;                if (isTotalRunning) totalTime++;                updateUI();            }, 1000);        }        // Start app        init();    </script></body></html>